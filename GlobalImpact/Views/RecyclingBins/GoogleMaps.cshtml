@model IEnumerable<GlobalImpact.Models.RecyclingBin>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAnaT4ITxYnVC69ETzeLpuOAvAOh6nNfTA&callback=initMap" sensor="false"></script>
@{
    Dictionary<Guid, double> listLatitude = new Dictionary<Guid, double>();
    Dictionary<Guid, double> listLongitude = new Dictionary<Guid, double>();
    Dictionary<Guid, string> listType = new Dictionary<Guid, string>();
    foreach (var item in Model)
    {
        listLatitude.Add(item.Id, item.Latitude);
        listLongitude.Add(item.Id, item.Latitude);
        listType.Add(item.Id, item.Type);
    }
}

<script type="text/javascript">
    let map;
    let userLocationMarker;
    let markers = [];

    function initialize() {
        const directionsService = new google.maps.DirectionsService();
        const directionsRenderer = new google.maps.DirectionsRenderer();

        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                let userLocation = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
                userLocationMarker = new google.maps.Marker({
                    position: userLocation,
                    map: map,
                    title: 'Your location'
                });
                markers.push(userLocationMarker);
                map.setCenter(userLocation);
            });
        } else {
            alert("Geolocation is not supported by this browser.");
        }

        var model = @Html.Raw(Json.Serialize(Model));

        const latitudes = model.map(item => item.latitude);
        const longitudes = model.map(item => item.longitude);
        const types = model.map(item => item.type);

        var canvas = $("#map_canvas");

        // Create the map instance before the loop
        const options = {
            zoom: 17,
            center: new google.maps.LatLng(latitudes[0], longitudes[0]),
            mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        map = new google.maps.Map(canvas[0], options);

        const infoWindow = new google.maps.InfoWindow();

        directionsRenderer.setMap(map);

        latitudes.forEach((latitude, index) => {
            const longitude = longitudes[index];
            const type = types[index];

            var latlng = new google.maps.LatLng(latitude, longitude);

            let marker = new google.maps.Marker({
                position: new google.maps.LatLng(latitude, longitude),
                title: type,
                map: map
            });
            markers.push(marker);

            if (type === 'plastic') {
                marker.setIcon('http://maps.google.com/mapfiles/ms/icons/yellow-dot.png');
            } else if (type === 'paper') {
                marker.setIcon('http://maps.google.com/mapfiles/ms/icons/blue-dot.png');
            } else if (type === 'glass') {
                marker.setIcon('http://maps.google.com/mapfiles/ms/icons/green-dot.png');
            }

            marker.addListener('click', function () {
                selectedMarker = marker;

                markers.forEach(marker => {
                    if (marker.getMap() === null) {
                        marker.setMap(map);
                    } else {
                        marker.setMap(null);
                    }
                });

                calculateAndDisplayRoute(marker);
                infoWindow.setContent(`<strong>Type:</strong> ${type}`);
                infoWindow.open(map, marker);

            });
        });
    }

    function calculateAndDisplayRoute(marker) {
        const directionsService = new google.maps.DirectionsService();
        const directionsRenderer = new google.maps.DirectionsRenderer();

        directionsRenderer.setMap(map);

        directionsService
            .route({
                origin: userLocationMarker.getPosition(),
                destination: marker.getPosition(), // Use the existing marker's position
                travelMode: google.maps.TravelMode.WALKING,
            })
            .then((response) => {
                directionsRenderer.setDirections(response);
            })
            .catch((e) => window.alert("Directions request failed due to " + status));
    }

    $(function () {
        initialize();
    });

</script>
<div style="width: 100%; height: 100%">
    <div id="map_canvas" style="width:90%; height:650px; margin-left: 100px"></div>
</div>