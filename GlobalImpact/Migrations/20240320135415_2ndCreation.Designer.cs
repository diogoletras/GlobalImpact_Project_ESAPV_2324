// <auto-generated />
using System;
using GlobalImpact.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GlobalImpact.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240320135415_2ndCreation")]
    partial class _2ndCreation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GlobalImpact.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("NIF")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UniqueCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "802cbe4e-e8a7-4660-9aed-2b8c7b422a2d",
                            AccessFailedCount = 0,
                            Age = 0,
                            ConcurrencyStamp = "d112a32c-7e35-4be6-b738-c85755422325",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = true,
                            NIF = 0,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAELtYdQteEL0AlT1JtOxRHC/4mUJAtErjbqL5co8RAtOiTiuHgjt9NDPWaC6V+yDOjg==",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = true,
                            Points = 0,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UniqueCode = "eb6b2dc4-1ae4-4b72-95ea-fd41c556c9a8",
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("GlobalImpact.Models.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("GlobalImpact.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductCategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<double>("Tax")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("394a8d2b-7507-4de5-a4f3-13ac8646ea1a"),
                            Description = "Costoletas de Vaca",
                            ImageUrl = "",
                            Name = "Costoletas",
                            Price = 5.0,
                            ProductCategoryId = "eed14674-4728-40d2-a30a-a58864d22e3a",
                            Stock = 20,
                            Tax = 0.059999999999999998
                        },
                        new
                        {
                            Id = new Guid("20744865-a7ad-4104-9dfd-9ce7c01c68a9"),
                            Description = "Bacalhau da Noruega",
                            ImageUrl = "",
                            Name = "Bacalhau",
                            Price = 8.0,
                            ProductCategoryId = "636ca5aa-6afe-48e2-b568-acc5a0cfdd8b",
                            Stock = 25,
                            Tax = 0.059999999999999998
                        },
                        new
                        {
                            Id = new Guid("1304f9ca-5d92-4b12-bde7-60e40ec09ffa"),
                            Description = "Broculos Verde",
                            ImageUrl = "",
                            Name = "Broculos",
                            Price = 1.5,
                            ProductCategoryId = "059fd93b-8158-412d-bda0-60d5671b7ab1",
                            Stock = 50,
                            Tax = 0.059999999999999998
                        },
                        new
                        {
                            Id = new Guid("1135a783-4f2f-4651-9b17-5f817d4c8b7c"),
                            Description = "Pessego da Colombia",
                            ImageUrl = "",
                            Name = "Pessego",
                            Price = 2.2999999999999998,
                            ProductCategoryId = "91f5d8ba-899b-447d-9f2c-aa66351e5894",
                            Stock = 30,
                            Tax = 0.059999999999999998
                        },
                        new
                        {
                            Id = new Guid("2673dd79-b4e9-4b15-bbae-e6ee7124c192"),
                            Description = "Licor Beirao versao Especial 100 anos",
                            ImageUrl = "",
                            Name = "Licor Beirao",
                            Price = 11.199999999999999,
                            ProductCategoryId = "4a0b9410-9810-400a-b704-7360181a8084",
                            Stock = 5,
                            Tax = 0.23000000000000001
                        });
                });

            modelBuilder.Entity("GlobalImpact.Models.ProductCategory", b =>
                {
                    b.Property<Guid>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductCategoryId");

                    b.ToTable("ProductsCategory");

                    b.HasData(
                        new
                        {
                            ProductCategoryId = new Guid("eed14674-4728-40d2-a30a-a58864d22e3a"),
                            Category = "talho"
                        },
                        new
                        {
                            ProductCategoryId = new Guid("636ca5aa-6afe-48e2-b568-acc5a0cfdd8b"),
                            Category = "peixaria"
                        },
                        new
                        {
                            ProductCategoryId = new Guid("059fd93b-8158-412d-bda0-60d5671b7ab1"),
                            Category = "legumes"
                        },
                        new
                        {
                            ProductCategoryId = new Guid("91f5d8ba-899b-447d-9f2c-aa66351e5894"),
                            Category = "frutas"
                        },
                        new
                        {
                            ProductCategoryId = new Guid("4a0b9410-9810-400a-b704-7360181a8084"),
                            Category = "bebidas"
                        });
                });

            modelBuilder.Entity("GlobalImpact.Models.RecyclingBin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Capacity")
                        .HasColumnType("float");

                    b.Property<double>("CurrentCapacity")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("RecyclingBinTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("RecyclingBins");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0fa9e1e3-17b5-4bde-a30a-78b57402e21c"),
                            Capacity = 100.0,
                            CurrentCapacity = 0.0,
                            Description = "Recycling Bin Glass",
                            Latitude = 38.521607817359822,
                            Longitude = -8.8368159603671987,
                            RecyclingBinTypeId = "b477c4a0-cb7e-403f-ba69-ef1829231947",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("3aec152d-6c47-422d-b207-ddcfe8cbe5c5"),
                            Capacity = 100.0,
                            CurrentCapacity = 0.0,
                            Description = "Recycling Bin Plastic",
                            Latitude = 38.52171490188254,
                            Longitude = -8.83694281687076,
                            RecyclingBinTypeId = "ea187030-f460-48d5-a88d-55dd0b205cbe",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("4f686b11-a48c-4bde-875a-93591f5bcf8b"),
                            Capacity = 100.0,
                            CurrentCapacity = 0.0,
                            Description = "Recycling Bin Paper",
                            Latitude = 38.521474614438482,
                            Longitude = -8.8366557205732299,
                            RecyclingBinTypeId = "82ec2f6e-945c-4d05-95b9-fa9976aa99d8",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("758e61ce-cbfd-4611-a530-3be355e706eb"),
                            Capacity = 100.0,
                            CurrentCapacity = 0.0,
                            Description = "Recycling Bin Glass",
                            Latitude = 38.519799793743871,
                            Longitude = -8.8360971667515606,
                            RecyclingBinTypeId = "b477c4a0-cb7e-403f-ba69-ef1829231947",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("66cd4a88-7c8b-436e-9903-9616dd038dba"),
                            Capacity = 100.0,
                            CurrentCapacity = 0.0,
                            Description = "Recycling Bin Plastic",
                            Latitude = 38.522550713957862,
                            Longitude = -8.8395605732421387,
                            RecyclingBinTypeId = "ea187030-f460-48d5-a88d-55dd0b205cbe",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("27a0a542-92ce-459b-a0ff-60fd9e09d8ed"),
                            Capacity = 100.0,
                            CurrentCapacity = 0.0,
                            Description = "Recycling Bin Paper",
                            Latitude = 38.522682016378347,
                            Longitude = -8.8397580181150541,
                            RecyclingBinTypeId = "82ec2f6e-945c-4d05-95b9-fa9976aa99d8",
                            Status = true
                        });
                });

            modelBuilder.Entity("GlobalImpact.Models.RecyclingBinType", b =>
                {
                    b.Property<Guid>("RecyclingBinTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecyclingBinTypeId");

                    b.ToTable("RecyclingBinType");

                    b.HasData(
                        new
                        {
                            RecyclingBinTypeId = new Guid("b477c4a0-cb7e-403f-ba69-ef1829231947"),
                            Type = "glass"
                        },
                        new
                        {
                            RecyclingBinTypeId = new Guid("ea187030-f460-48d5-a88d-55dd0b205cbe"),
                            Type = "plastic"
                        },
                        new
                        {
                            RecyclingBinTypeId = new Guid("82ec2f6e-945c-4d05-95b9-fa9976aa99d8"),
                            Type = "paper"
                        });
                });

            modelBuilder.Entity("GlobalImpact.Models.RecyclingTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<Guid>("RecyclingBinId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("RecyclingBinId");

                    b.HasIndex("UserId");

                    b.ToTable("RecyclingTransactions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ca022bc6-42a8-45a4-add6-b7964bd9e3c3",
                            ConcurrencyStamp = "4fba6f66-3e75-4d78-b7ce-23acc6550e59",
                            Name = "client",
                            NormalizedName = "CLIENT"
                        },
                        new
                        {
                            Id = "f2e90b8a-e637-4631-b651-946c71b657c1",
                            ConcurrencyStamp = "5fa359af-6cb1-4e32-9850-d1c2d0c01f3d",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "802cbe4e-e8a7-4660-9aed-2b8c7b422a2d",
                            RoleId = "f2e90b8a-e637-4631-b651-946c71b657c1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GlobalImpact.Models.Cart", b =>
                {
                    b.HasOne("GlobalImpact.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GlobalImpact.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GlobalImpact.Models.RecyclingTransaction", b =>
                {
                    b.HasOne("GlobalImpact.Models.RecyclingBin", "RecyclingBin")
                        .WithMany()
                        .HasForeignKey("RecyclingBinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GlobalImpact.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecyclingBin");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GlobalImpact.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GlobalImpact.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GlobalImpact.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GlobalImpact.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
