// <auto-generated />
using System;
using GlobalImpact.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GlobalImpact.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240403152037_SGRR")]
    partial class SGRR
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GlobalImpact.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("NIF")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UniqueCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2e776102-30bd-4681-8641-6864677b4fb6",
                            AccessFailedCount = 0,
                            Age = 0,
                            ConcurrencyStamp = "9a7ae475-fbbf-42c5-9f4b-85de9a72951c",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = true,
                            NIF = 0,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEOWSkaNS9KIBCGupAvuycchOPTohY8SIJVl9P8/hGpN1uMSUrhelq1Z74MBeMcsH1w==",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = true,
                            Points = 10000,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UniqueCode = "ebf6cdab-4ad2-42fb-9e9d-a24bc0675ab4",
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "9f36305c-f344-4c4f-8099-44db5e3b7017",
                            AccessFailedCount = 0,
                            Age = 50,
                            ConcurrencyStamp = "9493ab7e-b8fa-40b6-97e4-e028b4775318",
                            Email = "cliente@exemplo.com",
                            EmailConfirmed = true,
                            FirstName = "Cliente",
                            LastName = "Cliente",
                            LockoutEnabled = true,
                            NIF = 0,
                            NormalizedEmail = "CLIENTE@EXEMPLO.COM",
                            NormalizedUserName = "CLIENTE",
                            PasswordHash = "AQAAAAIAAYagAAAAEPafaKHnrOR/mQi8uZjtSBzY2PO286mwX/PR0vnBUiUS+V9yahDNoaQ+cO3BJbMlyQ==",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = true,
                            Points = 10000,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UniqueCode = "5cbb3168-81b2-41fc-995c-c8193beb2773",
                            UserName = "cliente"
                        });
                });

            modelBuilder.Entity("GlobalImpact.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("ProductCategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b33bc8ed-d9f5-4e2e-8fce-97588487e365"),
                            Description = "Costoletas de Vaca",
                            ImageUrl = "Talho-Castro-Costeleta-Porco.jpg",
                            Name = "Costoletas",
                            Points = 5,
                            ProductCategoryId = "887ca7ef-7ee5-47c3-a565-07a05f858590",
                            Stock = 20
                        },
                        new
                        {
                            Id = new Guid("b87fe79f-829c-4c67-a924-d14d00750410"),
                            Description = "Bacalhau da Noruega",
                            ImageUrl = "bacalhau.jpg",
                            Name = "Bacalhau",
                            Points = 8,
                            ProductCategoryId = "321c58d1-5964-46ef-8ca1-752fbda5c9f7",
                            Stock = 25
                        },
                        new
                        {
                            Id = new Guid("c32966c1-aa49-4551-97e6-58d0d7efd29c"),
                            Description = "Broculos Verde",
                            ImageUrl = "broculos.jpg",
                            Name = "Broculos",
                            Points = 1,
                            ProductCategoryId = "4890d39c-462a-4cd0-86dd-21bd0e5dfe93",
                            Stock = 50
                        },
                        new
                        {
                            Id = new Guid("ead7178f-83ae-4355-bb34-cb566afea830"),
                            Description = "Pessego da Colombia",
                            ImageUrl = "pessego.jpg",
                            Name = "Pessego",
                            Points = 2,
                            ProductCategoryId = "b0add186-5ff0-4e85-ab1c-6e5ebeb2e989",
                            Stock = 30
                        },
                        new
                        {
                            Id = new Guid("41822c68-14ce-49c5-813e-c8100222c22d"),
                            Description = "Licor Beirao versao Especial 100 anos",
                            ImageUrl = "licro-beirao.jpg",
                            Name = "Licor Beirao",
                            Points = 11,
                            ProductCategoryId = "f8fba2c5-10d1-4da8-b021-49cd96984ef3",
                            Stock = 5
                        });
                });

            modelBuilder.Entity("GlobalImpact.Models.ProductCategory", b =>
                {
                    b.Property<Guid>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductCategoryId");

                    b.ToTable("ProductsCategory");

                    b.HasData(
                        new
                        {
                            ProductCategoryId = new Guid("887ca7ef-7ee5-47c3-a565-07a05f858590"),
                            Category = "talho"
                        },
                        new
                        {
                            ProductCategoryId = new Guid("321c58d1-5964-46ef-8ca1-752fbda5c9f7"),
                            Category = "peixaria"
                        },
                        new
                        {
                            ProductCategoryId = new Guid("4890d39c-462a-4cd0-86dd-21bd0e5dfe93"),
                            Category = "legumes"
                        },
                        new
                        {
                            ProductCategoryId = new Guid("b0add186-5ff0-4e85-ab1c-6e5ebeb2e989"),
                            Category = "frutas"
                        },
                        new
                        {
                            ProductCategoryId = new Guid("f8fba2c5-10d1-4da8-b021-49cd96984ef3"),
                            Category = "bebidas"
                        });
                });

            modelBuilder.Entity("GlobalImpact.Models.ProductTransactionStatus", b =>
                {
                    b.Property<Guid>("ProductTransactionStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductTransactionStatusId");

                    b.ToTable("ProductTransactionStatus");

                    b.HasData(
                        new
                        {
                            ProductTransactionStatusId = new Guid("4b72727c-c20a-475a-86ec-3ab00470456d"),
                            Status = "Completed"
                        },
                        new
                        {
                            ProductTransactionStatusId = new Guid("ea7b8cc7-5732-4ed5-96cd-75334fce8c65"),
                            Status = "Pending"
                        },
                        new
                        {
                            ProductTransactionStatusId = new Guid("a8640ee8-2323-47cd-a51c-04019ec795a2"),
                            Status = "Cancelled"
                        });
                });

            modelBuilder.Entity("GlobalImpact.Models.ProductTransactions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TransactionStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ProductTransactions");
                });

            modelBuilder.Entity("GlobalImpact.Models.RecyclingBin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Capacity")
                        .HasColumnType("float");

                    b.Property<double>("CurrentCapacity")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("RecyclingBinTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("RecyclingBins");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e9050ec1-ea8f-46ab-a982-673284e22c51"),
                            Capacity = 100.0,
                            CurrentCapacity = 0.0,
                            Description = "Recycling Bin Glass",
                            Latitude = 38.521607817359822,
                            Longitude = -8.8368159603671987,
                            RecyclingBinTypeId = "d84aead2-e9ab-43b6-af86-989c83ca7f9a",
                            Status = false
                        },
                        new
                        {
                            Id = new Guid("6f771c1b-ca28-4af3-9091-a232d7d5bb69"),
                            Capacity = 100.0,
                            CurrentCapacity = 0.0,
                            Description = "Recycling Bin Plastic",
                            Latitude = 38.52171490188254,
                            Longitude = -8.83694281687076,
                            RecyclingBinTypeId = "e3a80ab0-840d-400a-bbe1-c55665d03fb9",
                            Status = false
                        },
                        new
                        {
                            Id = new Guid("eb1c6a70-517d-4d6d-8e2b-3ace6b7131d2"),
                            Capacity = 100.0,
                            CurrentCapacity = 0.0,
                            Description = "Recycling Bin Paper",
                            Latitude = 38.521474614438482,
                            Longitude = -8.8366557205732299,
                            RecyclingBinTypeId = "6f19a179-f17f-4e4b-b5b8-d81408b3acfb",
                            Status = false
                        },
                        new
                        {
                            Id = new Guid("0b7192b7-8d8c-459c-a760-f77c63065d8a"),
                            Capacity = 100.0,
                            CurrentCapacity = 0.0,
                            Description = "Recycling Bin Glass",
                            Latitude = 38.519799793743871,
                            Longitude = -8.8360971667515606,
                            RecyclingBinTypeId = "d84aead2-e9ab-43b6-af86-989c83ca7f9a",
                            Status = false
                        },
                        new
                        {
                            Id = new Guid("5fbfe4c8-d979-4624-8c7c-a5935b718c94"),
                            Capacity = 100.0,
                            CurrentCapacity = 100.0,
                            Description = "Recycling Bin Plastic",
                            Latitude = 38.522550713957862,
                            Longitude = -8.8395605732421387,
                            RecyclingBinTypeId = "e3a80ab0-840d-400a-bbe1-c55665d03fb9",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("c1f46bf8-5f7c-4314-afe4-c74fd6f67d89"),
                            Capacity = 100.0,
                            CurrentCapacity = 100.0,
                            Description = "Recycling Bin Paper",
                            Latitude = 38.522682016378347,
                            Longitude = -8.8397580181150541,
                            RecyclingBinTypeId = "6f19a179-f17f-4e4b-b5b8-d81408b3acfb",
                            Status = true
                        });
                });

            modelBuilder.Entity("GlobalImpact.Models.RecyclingBinType", b =>
                {
                    b.Property<Guid>("RecyclingBinTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecyclingBinTypeId");

                    b.ToTable("RecyclingBinType");

                    b.HasData(
                        new
                        {
                            RecyclingBinTypeId = new Guid("d84aead2-e9ab-43b6-af86-989c83ca7f9a"),
                            Type = "glass"
                        },
                        new
                        {
                            RecyclingBinTypeId = new Guid("e3a80ab0-840d-400a-bbe1-c55665d03fb9"),
                            Type = "plastic"
                        },
                        new
                        {
                            RecyclingBinTypeId = new Guid("6f19a179-f17f-4e4b-b5b8-d81408b3acfb"),
                            Type = "paper"
                        });
                });

            modelBuilder.Entity("GlobalImpact.Models.RecyclingTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<Guid>("RecyclingBinId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("RecyclingBinId");

                    b.HasIndex("UserId");

                    b.ToTable("RecyclingTransactions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8b57dd0c-cf88-4cdf-8473-9fc192d39172",
                            ConcurrencyStamp = "7bf444b2-3088-4867-b5da-c091d01ee1dd",
                            Name = "client",
                            NormalizedName = "CLIENT"
                        },
                        new
                        {
                            Id = "2127ccd4-5708-4494-8636-b0446c574672",
                            ConcurrencyStamp = "d432090e-de1a-4b59-83fd-f409f898e451",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "9f36305c-f344-4c4f-8099-44db5e3b7017",
                            RoleId = "8b57dd0c-cf88-4cdf-8473-9fc192d39172"
                        },
                        new
                        {
                            UserId = "2e776102-30bd-4681-8641-6864677b4fb6",
                            RoleId = "2127ccd4-5708-4494-8636-b0446c574672"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GlobalImpact.Models.RecyclingTransaction", b =>
                {
                    b.HasOne("GlobalImpact.Models.RecyclingBin", "RecyclingBin")
                        .WithMany()
                        .HasForeignKey("RecyclingBinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GlobalImpact.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecyclingBin");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GlobalImpact.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GlobalImpact.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GlobalImpact.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GlobalImpact.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
