// <auto-generated />
using System;
using GlobalImpact.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GlobalImpact.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GlobalImpact.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("NIF")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UniqueCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "73b8cb14-e80c-4777-8258-75606d9d234b",
                            AccessFailedCount = 0,
                            Age = 0,
                            ConcurrencyStamp = "f359d7f5-0e37-49bd-9c19-9b8d746674e4",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = true,
                            NIF = 0,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEMRQcHtRAXe5djEQDmB8fHvKvlYc2PprYjxib7G7R6FM1b4H859DMzrncjB2kfRoWw==",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = true,
                            Points = 10000,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UniqueCode = "fb134550-849d-4f43-9401-da0c2d09ccf2",
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "8a81f419-95a5-4960-aee2-3d7cd184db0d",
                            AccessFailedCount = 0,
                            Age = 50,
                            ConcurrencyStamp = "61e5028c-f72b-4b84-829a-401df272cf49",
                            Email = "cliente@exemplo.com",
                            EmailConfirmed = true,
                            FirstName = "Cliente",
                            LastName = "Cliente",
                            LockoutEnabled = true,
                            NIF = 0,
                            NormalizedEmail = "CLIENTE@EXEMPLO.COM",
                            NormalizedUserName = "CLIENTE",
                            PasswordHash = "AQAAAAIAAYagAAAAEGUeTW70wU3s4Sd2Fjz9yv2EuSXADBPorsTA22Z1thHuGydBk0drTEZEBRMVI4p74g==",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = true,
                            Points = 10000,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UniqueCode = "897959b8-f7ff-4aa9-b280-ef7573601c4b",
                            UserName = "cliente"
                        });
                });

            modelBuilder.Entity("GlobalImpact.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("ProductCategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("88d6af65-edc0-4450-9566-86f3809f28d1"),
                            Description = "Costoletas de Vaca",
                            ImageUrl = "Talho-Castro-Costeleta-Porco.jpg",
                            Name = "Costoletas",
                            Points = 5,
                            ProductCategoryId = "5e497b29-5150-4608-9ef2-048e5b3f9c7a",
                            Stock = 20
                        },
                        new
                        {
                            Id = new Guid("4a4c91eb-f87e-4cdf-88e0-8134fdc8ed56"),
                            Description = "Bacalhau da Noruega",
                            ImageUrl = "bacalhau.jpg",
                            Name = "Bacalhau",
                            Points = 8,
                            ProductCategoryId = "3f23444c-ef54-4dee-a206-f11aae233c4f",
                            Stock = 25
                        },
                        new
                        {
                            Id = new Guid("f70cc9d9-9030-4615-bd78-b399f869f903"),
                            Description = "Broculos Verde",
                            ImageUrl = "broculos.jpg",
                            Name = "Broculos",
                            Points = 1,
                            ProductCategoryId = "bc7dc632-d46d-48d3-bbac-cc1a45689072",
                            Stock = 50
                        },
                        new
                        {
                            Id = new Guid("e740c75f-4092-454e-a3d5-23b185a45b68"),
                            Description = "Pessego da Colombia",
                            ImageUrl = "pessego.jpg",
                            Name = "Pessego",
                            Points = 2,
                            ProductCategoryId = "b833ce30-fb27-407c-bb61-bbed0a3d645e",
                            Stock = 30
                        },
                        new
                        {
                            Id = new Guid("7ba23eb4-36e9-40d1-b28b-a0b3192b6f7a"),
                            Description = "Licor Beirao versao Especial 100 anos",
                            ImageUrl = "licro-beirao.jpg",
                            Name = "Licor Beirao",
                            Points = 11,
                            ProductCategoryId = "e0fdfe38-4523-47af-9f12-e80a2d88873a",
                            Stock = 5
                        });
                });

            modelBuilder.Entity("GlobalImpact.Models.ProductCategory", b =>
                {
                    b.Property<Guid>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductCategoryId");

                    b.ToTable("ProductsCategory");

                    b.HasData(
                        new
                        {
                            ProductCategoryId = new Guid("5e497b29-5150-4608-9ef2-048e5b3f9c7a"),
                            Category = "talho"
                        },
                        new
                        {
                            ProductCategoryId = new Guid("3f23444c-ef54-4dee-a206-f11aae233c4f"),
                            Category = "peixaria"
                        },
                        new
                        {
                            ProductCategoryId = new Guid("bc7dc632-d46d-48d3-bbac-cc1a45689072"),
                            Category = "legumes"
                        },
                        new
                        {
                            ProductCategoryId = new Guid("b833ce30-fb27-407c-bb61-bbed0a3d645e"),
                            Category = "frutas"
                        },
                        new
                        {
                            ProductCategoryId = new Guid("e0fdfe38-4523-47af-9f12-e80a2d88873a"),
                            Category = "bebidas"
                        });
                });

            modelBuilder.Entity("GlobalImpact.Models.ProductTransactions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ProductTransactions");
                });

            modelBuilder.Entity("GlobalImpact.Models.RecyclingBin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Capacity")
                        .HasColumnType("float");

                    b.Property<double>("CurrentCapacity")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("RecyclingBinTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("RecyclingBins");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d1940a1-5aa9-4760-ae7c-bc9584a324cc"),
                            Capacity = 100.0,
                            CurrentCapacity = 0.0,
                            Description = "Recycling Bin Glass",
                            Latitude = 38.521607817359822,
                            Longitude = -8.8368159603671987,
                            RecyclingBinTypeId = "802f94ed-6561-433b-a126-ac60b55078f7",
                            Status = false
                        },
                        new
                        {
                            Id = new Guid("2137b3f7-3492-4937-b69c-90b57834ec04"),
                            Capacity = 100.0,
                            CurrentCapacity = 0.0,
                            Description = "Recycling Bin Plastic",
                            Latitude = 38.52171490188254,
                            Longitude = -8.83694281687076,
                            RecyclingBinTypeId = "ac82b0ee-29b8-4370-8110-dc4afa1d0ea2",
                            Status = false
                        },
                        new
                        {
                            Id = new Guid("58b7d4c1-a3c6-4053-8ab4-d2a1cf7f75ff"),
                            Capacity = 100.0,
                            CurrentCapacity = 0.0,
                            Description = "Recycling Bin Paper",
                            Latitude = 38.521474614438482,
                            Longitude = -8.8366557205732299,
                            RecyclingBinTypeId = "127e3726-65fe-4164-98a5-a6c154a34de5",
                            Status = false
                        },
                        new
                        {
                            Id = new Guid("f81b3465-319f-406a-a758-2ba1eda49b45"),
                            Capacity = 100.0,
                            CurrentCapacity = 0.0,
                            Description = "Recycling Bin Glass",
                            Latitude = 38.519799793743871,
                            Longitude = -8.8360971667515606,
                            RecyclingBinTypeId = "802f94ed-6561-433b-a126-ac60b55078f7",
                            Status = false
                        },
                        new
                        {
                            Id = new Guid("2a1bce9f-4c36-4edf-a797-336ef56edece"),
                            Capacity = 100.0,
                            CurrentCapacity = 100.0,
                            Description = "Recycling Bin Plastic",
                            Latitude = 38.522550713957862,
                            Longitude = -8.8395605732421387,
                            RecyclingBinTypeId = "ac82b0ee-29b8-4370-8110-dc4afa1d0ea2",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("f1549c50-5e1b-4714-ad8b-0b6cc6e45ca9"),
                            Capacity = 100.0,
                            CurrentCapacity = 100.0,
                            Description = "Recycling Bin Paper",
                            Latitude = 38.522682016378347,
                            Longitude = -8.8397580181150541,
                            RecyclingBinTypeId = "127e3726-65fe-4164-98a5-a6c154a34de5",
                            Status = true
                        });
                });

            modelBuilder.Entity("GlobalImpact.Models.RecyclingBinType", b =>
                {
                    b.Property<Guid>("RecyclingBinTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecyclingBinTypeId");

                    b.ToTable("RecyclingBinType");

                    b.HasData(
                        new
                        {
                            RecyclingBinTypeId = new Guid("802f94ed-6561-433b-a126-ac60b55078f7"),
                            Type = "glass"
                        },
                        new
                        {
                            RecyclingBinTypeId = new Guid("ac82b0ee-29b8-4370-8110-dc4afa1d0ea2"),
                            Type = "plastic"
                        },
                        new
                        {
                            RecyclingBinTypeId = new Guid("127e3726-65fe-4164-98a5-a6c154a34de5"),
                            Type = "paper"
                        });
                });

            modelBuilder.Entity("GlobalImpact.Models.RecyclingTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<Guid>("RecyclingBinId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("RecyclingBinId");

                    b.HasIndex("UserId");

                    b.ToTable("RecyclingTransactions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "150b930b-3db2-4b29-ba47-6ec9a8851537",
                            ConcurrencyStamp = "24a3921a-b7d5-4a6b-ad46-61b8d795d996",
                            Name = "client",
                            NormalizedName = "CLIENT"
                        },
                        new
                        {
                            Id = "07dcb156-acd8-45f0-ac69-d08cbc0c5b88",
                            ConcurrencyStamp = "3c4e26af-bebb-42d9-a942-64fb6e7ed98f",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8a81f419-95a5-4960-aee2-3d7cd184db0d",
                            RoleId = "150b930b-3db2-4b29-ba47-6ec9a8851537"
                        },
                        new
                        {
                            UserId = "73b8cb14-e80c-4777-8258-75606d9d234b",
                            RoleId = "07dcb156-acd8-45f0-ac69-d08cbc0c5b88"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GlobalImpact.Models.RecyclingTransaction", b =>
                {
                    b.HasOne("GlobalImpact.Models.RecyclingBin", "RecyclingBin")
                        .WithMany()
                        .HasForeignKey("RecyclingBinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GlobalImpact.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecyclingBin");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GlobalImpact.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GlobalImpact.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GlobalImpact.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GlobalImpact.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
